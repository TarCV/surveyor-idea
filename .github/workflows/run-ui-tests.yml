# GitHub Actions Workflow for launching UI tests on Linux, Windows, and Mac in the following steps:
# - prepare and launch IDE with your plugin and robot-server plugin, which is needed to interact with UI
# - wait for IDE to start
# - run UI tests with separate Gradle task
#
# Please check https://github.com/JetBrains/intellij-ui-test-robot for information about UI tests with IntelliJ Platform
#
# Workflow is triggered manually.

name: Run UI Tests
on:
  workflow_dispatch

jobs:

  testUI:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        include:
#          - os: ubuntu-latest
#            runIde: |
#              export DISPLAY=:99.0
#              Xvfb -ac :99 -screen 0 1920x1080x24 &
#              sleep 10
#              mkdir -p plugin/build/reports
#              ./gradlew :plugin:runIdeForUiTests >plugin/build/reports/idea.log 2>&1 &
#            runTests: |
#              export DISPLAY=:99.0
#              ./gradlew :plugin:test
#            url: http://127.0.0.1:8082
#            reportName: ui-tests-linux
          - os: macos-latest
            runIde: |
              mkdir -p plugin/build/reports
              ./gradlew :plugin:runIdeForUiTests >plugin/build/reports/idea.log 2>&1 &
            runTests: |
              sleep 5
              osascript <<EOF
              tell application "Finder"
                get the name of every process whose visible is true
              end tell
              EOF
              ./gradlew :plugin:test
            url: http://127.0.0.1:8082
            reportName: ui-tests-mac
#          - os: windows-latest
#            runIde: |
#              mkdir "plugin/build/reports"
#              start gradlew.bat :plugin:runIdeForUiTests
#            runTests: ./gradlew :plugin:test
#            url: http://localhost:8082
#            reportName: ui-tests-windows

    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Setup Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11

#      # Setup Gradle
#      - name: Setup Gradle
#        uses: gradle/gradle-build-action@v2
#        with:
#          gradle-home-cache-cleanup: true

      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2
        with:
          # Not strictly necessary, but it may prevent rate limit
          # errors especially on GitHub-hosted macos machines.
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Disable artifact verification
        run: rm gradle/verification-metadata.xml

      - name: Build plugin & tests
        run: ./gradlew :plugin:clean :plugin:jar :plugin:testClasses

      # Run IDEA prepared for UI testing
      - name: Run IDE
        timeout-minutes: 10
        run: ${{ matrix.runIde }}

      # Wait for IDEA to be started
      - name: Health Check
        uses: jtalk//url-health-check-action@v3
        with:
          url: ${{ matrix.url }}
          max-attempts: 8
          retry-delay: 30s

      # Run tests
      - name: Tests
        run: ${{ matrix.runTests }}

      # Collect Tests Result of failed tests
      - name: Move screenshot files
        if: ${{ always() }}
        run: |
          mv plugin/screenshot plugin/build/reports
      - name: Move video files
        if: ${{ always() }}
        run: |
          mv plugin/video plugin/build/reports
      - name: Collect Tests Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.reportName }}
          path: |
            plugin/build/reports